#!/usr/bin/env python3
"""
QR Code Verification Script

This script uses pyzbar to decode and verify QR codes generated by our tools.
It reads QR code images and displays the decoded data to ensure they contain
the correct information.

Usage:
    python qr_code_verifier.py --file qr_test/wallet_1_address.png
    python qr_code_verifier.py --directory qr_test/
"""

import os
import argparse
import sys
from typing import List, Dict

try:
    from pyzbar import pyzbar
    from PIL import Image
    PYZBAR_AVAILABLE = True
except ImportError:
    PYZBAR_AVAILABLE = False
    print("Error: pyzbar library not available")
    print("Install with: pip install pyzbar")
    sys.exit(1)

def decode_qr_code(image_path: str) -> Dict:
    """Decode a QR code image and return the data"""
    try:
        # Open and decode the image
        image = Image.open(image_path)
        decoded_objects = pyzbar.decode(image)
        
        if not decoded_objects:
            return {
                'success': False,
                'error': 'No QR code found in image',
                'data': None
            }
        
        # Get the first QR code (should only be one)
        qr_code = decoded_objects[0]
        
        return {
            'success': True,
            'data': qr_code.data.decode('utf-8'),
            'type': qr_code.type,
            'rect': qr_code.rect,
            'polygon': qr_code.polygon
        }
        
    except Exception as e:
        return {
            'success': False,
            'error': str(e),
            'data': None
        }

def verify_wallet_qr_codes(directory: str) -> Dict:
    """Verify all QR codes in a wallet directory"""
    results = {}
    
    # Expected QR code types
    qr_types = ['address', 'private_key', 'mnemonic', 'complete']
    
    for qr_type in qr_types:
        # Find matching files
        pattern = f"wallet_*_{qr_type}.png"
        matching_files = []
        
        for filename in os.listdir(directory):
            if filename.endswith(f"_{qr_type}.png"):
                matching_files.append(filename)
        
        if matching_files:
            file_path = os.path.join(directory, matching_files[0])
            result = decode_qr_code(file_path)
            results[qr_type] = {
                'file': matching_files[0],
                'result': result
            }
    
    return results

def analyze_qr_data(qr_type: str, data: str) -> Dict:
    """Analyze decoded QR data and provide insights"""
    analysis = {
        'type': qr_type,
        'data_length': len(data),
        'valid': False,
        'insights': []
    }
    
    if qr_type == 'address':
        if data.startswith('TR') and len(data) == 34:
            analysis['valid'] = True
            analysis['insights'].append("Valid TRON address format")
        else:
            analysis['insights'].append("Invalid TRON address format")
    
    elif qr_type == 'private_key':
        if len(data) == 64 and all(c in '0123456789abcdefABCDEF' for c in data):
            analysis['valid'] = True
            analysis['insights'].append("Valid hex private key (64 characters)")
        else:
            analysis['insights'].append("Invalid private key format")
    
    elif qr_type == 'mnemonic':
        words = data.split()
        if len(words) == 12:
            analysis['valid'] = True
            analysis['insights'].append(f"Valid 12-word mnemonic phrase")
        elif len(words) == 24:
            analysis['valid'] = True
            analysis['insights'].append(f"Valid 24-word mnemonic phrase")
        else:
            analysis['insights'].append(f"Invalid mnemonic: {len(words)} words (expected 12 or 24)")
    
    elif qr_type == 'complete':
        try:
            import json
            wallet_data = json.loads(data)
            analysis['valid'] = True
            analysis['insights'].append("Valid JSON wallet data")
            
            if 'address' in wallet_data:
                analysis['insights'].append(f"Contains address: {wallet_data['address'][:10]}...")
            if 'privateKey' in wallet_data:
                analysis['insights'].append("Contains private key")
            if 'mnemonic' in wallet_data:
                analysis['insights'].append("Contains mnemonic phrase")
            if 'derivationPath' in wallet_data:
                analysis['insights'].append(f"Derivation path: {wallet_data['derivationPath']}")
                
        except json.JSONDecodeError:
            analysis['insights'].append("Invalid JSON format")
    
    return analysis

def main():
    if not PYZBAR_AVAILABLE:
        return 1
    
    parser = argparse.ArgumentParser(description='QR Code Verification Tool')
    
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--file', help='Single QR code file to verify')
    group.add_argument('--directory', help='Directory containing wallet QR codes')
    
    parser.add_argument('--analyze', action='store_true', help='Perform detailed analysis of QR data')
    parser.add_argument('--show-data', action='store_true', help='Show decoded data (use carefully with private keys)')
    
    args = parser.parse_args()
    
    try:
        if args.file:
            # Verify single file
            print(f"Verifying QR code: {args.file}")
            print("=" * 50)
            
            if not os.path.exists(args.file):
                print(f"Error: File not found: {args.file}")
                return 1
            
            result = decode_qr_code(args.file)
            
            if result['success']:
                print(f"‚úÖ Successfully decoded QR code")
                print(f"   Type: {result['type']}")
                print(f"   Data length: {len(result['data'])} characters")
                
                if args.show_data:
                    print(f"   Data: {result['data']}")
                else:
                    # Show preview of data
                    data_preview = result['data'][:50] + "..." if len(result['data']) > 50 else result['data']
                    print(f"   Preview: {data_preview}")
                
                if args.analyze:
                    # Try to determine QR type from filename
                    filename = os.path.basename(args.file)
                    qr_type = None
                    for qr_t in ['address', 'private_key', 'mnemonic', 'complete']:
                        if qr_t in filename:
                            qr_type = qr_t
                            break
                    
                    if qr_type:
                        analysis = analyze_qr_data(qr_type, result['data'])
                        print(f"\nüìä Analysis:")
                        print(f"   Valid: {'‚úÖ' if analysis['valid'] else '‚ùå'}")
                        for insight in analysis['insights']:
                            print(f"   ‚Ä¢ {insight}")
            else:
                print(f"‚ùå Failed to decode QR code: {result['error']}")
                return 1
        
        elif args.directory:
            # Verify wallet directory
            print(f"Verifying wallet QR codes in: {args.directory}")
            print("=" * 60)
            
            if not os.path.exists(args.directory):
                print(f"Error: Directory not found: {args.directory}")
                return 1
            
            results = verify_wallet_qr_codes(args.directory)
            
            if not results:
                print("No wallet QR codes found in directory")
                return 1
            
            total_codes = len(results)
            successful_codes = sum(1 for r in results.values() if r['result']['success'])
            
            print(f"Found {total_codes} QR code types, {successful_codes} successfully decoded\n")
            
            for qr_type, info in results.items():
                result = info['result']
                file_name = info['file']
                
                if result['success']:
                    print(f"‚úÖ {qr_type.upper()} QR Code ({file_name})")
                    print(f"   Data length: {len(result['data'])} characters")
                    
                    if args.show_data and qr_type != 'private_key':
                        # Don't show private key data by default for security
                        print(f"   Data: {result['data']}")
                    elif qr_type == 'private_key':
                        print(f"   Data: [PRIVATE KEY HIDDEN - use --show-data to display]")
                    else:
                        data_preview = result['data'][:50] + "..." if len(result['data']) > 50 else result['data']
                        print(f"   Preview: {data_preview}")
                    
                    if args.analyze:
                        analysis = analyze_qr_data(qr_type, result['data'])
                        print(f"   Valid: {'‚úÖ' if analysis['valid'] else '‚ùå'}")
                        for insight in analysis['insights']:
                            print(f"   ‚Ä¢ {insight}")
                    
                    print()
                else:
                    print(f"‚ùå {qr_type.upper()} QR Code ({file_name})")
                    print(f"   Error: {result['error']}\n")
            
            # Summary
            if successful_codes == total_codes:
                print(f"üéâ All {total_codes} QR codes verified successfully!")
            else:
                print(f"‚ö†Ô∏è  {successful_codes}/{total_codes} QR codes verified successfully")
    
    except KeyboardInterrupt:
        print("\nVerification cancelled by user")
        return 1
    except Exception as e:
        print(f"Error: {e}")
        return 1
    
    return 0

if __name__ == '__main__':
    sys.exit(main())
